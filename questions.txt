Prime Number
Pattern Programs

Pattern-1
*****
*****
*****
*****
*****

Time and Space Complexity
Analysis of Loop
Array CRUD
Max Element in Array
Second Max Element in Array
Bar Chart
Is Array Sorted
Reverse an Array
Pair Sum
Buy and Sell Stock
Rain Water Trapping


Prefix and Suffix
Prefix Sum, Min, Max
Suffix Sum, Min, Max

Sorting
- Bubble Sort
- Selection Sort
  - take 0th element as min element
  - compare min element with second element, if second element is smaller than assign second element as min
  - at the end of first iteration of i we get minimum element and we place that element on 0th index
  - after each iteration min element is placed in front of unsorted array

- Insertion Sort
- Merge 2 sorted arrays
    i/p : arr_1[] = {6,9,10,15}, arr_2[] = {1,3,7,11,14,20};
    o/p : 1,3,6,7,9,10,11,14,15,20
- Merge Sort
  - based on Divide and Conquer

Majority Element
- element that appears more than n/2 in an array

- Naive Approach
- Hashmap
- Using Divide & Conquer - HW
- Using Boyer Moore Vooting Algorithm

- Quick Sort
- Cycle Sort
- Counting Sort
- Heap Sort
- Radix Sort
- Shell Sort
- Tim Sort
Searching


NBonacci Series
N = 3
0,1,1,2,4,7,13,24

String Pattern Matching
- Window Sliding Technique
- Rabin Karp
- KMP - Knuth Morris Pratt Algorithm
  - It construct LPS (Longest Prefix Suffix) Array 

String Compression
https://leetcode.com/problems/string-compression/

String to Integer
https://leetcode.com/problems/string-to-integer-atoi/

Roman to Integer
https://leetcode.com/problems/roman-to-integer/

Integer to Roman
https://leetcode.com/problems/integer-to-roman/

=======================================
DivSub - Divide Subset
- PigeonHole Principle
=======================================

Arrays 2D
- Square Matrix
- Symmetric Matrix : a[i][j] = a[j][i]
- Tridiagonal Matrix
- Toeplitz Matrix

Ways to define 2D arrays in Java
int arr[][] = new int[3][3];
int [][]arr = new int[3][3];
int []arr[] = new int[3][3];
int arr[][] = {{1,2,3}, {4,5,6}, {7,8,9}}

1. Traverse 2D array in row major and col major
2. Transpose
3. Lucky Number
4. Rotate Matrix
5. Snake Pattern
6. Spiral Matrix
7. K-Weakest Row
8. Pascal Triangle
9. Toeplitz Matrix

=======================================

Linked List
- No Random Access like array
- Dynamic Memory, Non-Contiguous
- Sequential Access

Data is stored in Node in Linked List

1. Insertion in Linked List
   - start / mid / end
2. Deletion in Linked List
   - start / mid / end
3. Reverse Linked List
4. Mid Point - Slow Fast Pointer
5. Detect and Remove Loop in Linked List - HW : LeetCode : 141
6. Merge 2 sorted Linked List : LeetCode : 21
7. Merge K sorted Linked List
8. Clone a Doubly Linked List
9. LRU Cache : LeetCode 146

==================================
Binary Exponentiation
Inclusion Exclusion

BigInteger
Addition of 2 Linked List

Total numbers which are less than 500 and divisible by first 3 prime numbers
=> {2,3,5}

Bit Manipulations
Kth Bit is Set or Not
Count Set Bits
Missing Number
Odd Occurrence of a Number
Power Set

==================================

Stack
- follows LIFO - Last In First Out

Stack Operations
- push - append data
- pop  - delete data from top
- peek - return top element
- empty - checks if stack is empty

1. Stack Operations
2. Valid Parantheses
